(function() {
    var AppStatsGlobals = {};
    AppStatsGlobals["#graph_module_clicks"] = {};
    AppStatsGlobals["#graph_result_clicks"] = {};

    $(document).on("turbolinks:load", function() {
        if ($("#graph_module_clicks").length) {
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                url: "data_module_clicks",
                dataType: "json",
                success: function(moduleDataSet) {
                    var moduleData = _.cloneDeep(moduleDataSet);
                    AppStatsGlobals["#graph_module_clicks"].OriginalData = moduleData;
                    AppStatsGlobals["#graph_module_clicks"].Data = moduleData;
                    AppStatsGlobals["#graph_module_clicks"].Height = 450;
                    AppStatsGlobals["#graph_module_clicks"].Sort = 0;
                    draw_graph_clicks_overview("#graph_module_clicks");
                },
                error: function(result) {
                    error();
                }
            });
        }
        if ($("#graph_result_clicks").length) {
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                url: "data_result_clicks",
                dataType: "json",
                success: function(resultDataSet) {
                    var resultData = _.cloneDeep(resultDataSet);
                    AppStatsGlobals["#graph_result_clicks"].OriginalData = resultData;
                    AppStatsGlobals["#graph_result_clicks"].Data = resultData;
                    AppStatsGlobals["#graph_result_clicks"].Sort = 0;
                    AppStatsGlobals["#graph_result_clicks"].Height = 450;
                    draw_graph_clicks_overview("#graph_result_clicks");
                },
                error: function(result) {
                    error();
                }
            });
        }
    });

    function error() {
        console.log("Error retrieving data");
    }

    function draw_graph_clicks_overview(id) {
        var Globals = AppStatsGlobals[id],
            sortStates = [0, 0, 0, 0]
        dataInt = Globals.Data,
            oldHeight = Globals.Height;

        sortStates[Globals.Sort] = 1;

        var svg = d3.select(id),
            margin = {
                top: 20,
                right: 20,
                bottom: 20,
                left: 20
            },
            width = +svg.attr("width") - margin.left - margin.right,
            textPadding = 5,
            rowHeight = 35,
            barHeight = 25,
            rankWidth = width / 8,
            categoryWidth = width / 4,
            countWidth = 5 * width / 16,
            percentWidth = 5 * width / 16,
            barCenter = rankWidth + categoryWidth + countWidth,
            height = (dataInt.length + 1) * rowHeight,
            childOffset = 25,
            triangleSpacing = 15,
            key = function(d) {
                return d.key;
            };

        svg.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("height", height + margin.top + margin.bottom)
            .on("end", function(d) {
                Globals.Height = height;
            });

        var groupEnter = svg.selectAll("g").data([dataInt]).enter();

        groupEnter.append("g")
            .attr("class", "gAll");

        var gAll = svg.select(".gAll")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var x = d3.scaleLinear().rangeRound([0, countWidth + percentWidth - 200]);

        x.domain([0, d3.max(dataInt, function(d) {
            return d.clickcount
        })]);

        var triangle = d3.symbol().type(d3.symbolTriangle).size(20);

        // Make header row //////////////////////////////////////////////////////////////////////////////
        var headGroupEnter = gAll.selectAll(".headRow").data([dataInt]).enter();

        headGroupEnter.append("g")
            .attr("class", "headRow");

        var gHead = gAll.select(".headRow")
            .attr("transform", "translate(0,0)");

        var headEnter = gHead.selectAll("rect").data([dataInt]).enter();

        headEnter.append("rect")
            .attr("class", "darkBar")
            .attr("x", 0)
            .attr("y", 0)
            .attr("width", width)
            .attr("height", rowHeight);

        headEnter.append("text")
            .text("Rank")
            .attr("class", "headText")
            .attr("transform", "translate(" + textPadding + "," + (rowHeight / 2 + textPadding) + ")");

        headEnter.append("rect")
            .attr("class", "sortRect")
            .attr("x", (rankWidth - 2 * triangleSpacing))
            .attr("y", 0)
            .attr("width", 2 * triangleSpacing)
            .attr("height", rowHeight)
            .on("click", function(d) {
                if (Globals.Sort == 0) {
                    sort_clicks_overview(id, 1);
                } else {
                    sort_clicks_overview(id, 0);
                }
            });

        headEnter.append("text")
            .text(function(d) {
                if (id == "#graph_module_clicks") {
                    return "Module Clicked";
                } else {
                    return "Result Clicked";
                }
            })
            .attr("class", "headText")
            .attr("transform", "translate(" + (rankWidth + textPadding) + "," + (rowHeight / 2 + textPadding) + ")");

        headEnter.append("rect")
            .attr("class", "sortRect")
            .attr("x", (rankWidth + categoryWidth - 2 * triangleSpacing))
            .attr("y", 0)
            .attr("width", 2 * triangleSpacing)
            .attr("height", rowHeight)
            .on("click", function(d) {
                if (Globals.Sort == 2) {
                    sort_clicks_overview(id, 3);
                } else {
                    sort_clicks_overview(id, 2);
                }
            });

        headEnter.append("text")
            .text("Count")
            .attr("class", "headText")
            .attr("transform", "translate(" + (rankWidth + categoryWidth + textPadding) + "," + (rowHeight / 2 + textPadding) + ")");

        headEnter.append("text")
            .text("Percent")
            .attr("class", "percentText")
            .attr("transform", "translate(" + (rankWidth + categoryWidth + countWidth + percentWidth - textPadding) + "," + (rowHeight / 2 + textPadding) + ")");

        var triangles = gHead.selectAll("path").data(sortStates);

        triangles.enter().append("path")
            .attr("d", triangle)
            .attr("pointer-events", "none")
            .attr("transform", function(d, i) {
                if (i == 0) {
                    return "translate(" + (rankWidth - triangleSpacing) + "," + (rowHeight / 2 - textPadding) + ")";
                } else if (i == 1) {
                    return "translate(" + (rankWidth - triangleSpacing) + "," + (rowHeight / 2 + textPadding) + ") rotate(180)";
                } else if (i == 2) {
                    return "translate(" + (rankWidth + categoryWidth - triangleSpacing) + "," + (rowHeight / 2 - textPadding) + ")";
                } else if (i == 3) {
                    return "translate(" + (rankWidth + categoryWidth - triangleSpacing) + "," + (rowHeight / 2 + textPadding) + ") rotate(180)";
                }
            })
            .merge(triangles)
            .transition().duration(500)
            .attr("fill", function(d, i) {
                if (d) {
                    return "steelblue";
                } else {
                    return "lightsteelblue";
                }
            });

        // Make data rows ////////////////////////////////////////////////////////////////////////////////
        var dataGroup = gAll.selectAll(".dataRow").data([dataInt]);

        dataGroup.enter().append("g")
            .attr("class", "dataRow");

        var dataRows = gAll.select(".dataRow")
            .attr("transform", "translate(0,0)");

        // Make background rects
        var dataRects = dataRows.selectAll(".darkBar, .lightBar").data(dataInt, key);

        dataRects.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("y", function(d, i) {
                return (i + 1) * rowHeight;
            });
        dataRects.exit().remove();
        dataRects.enter().append("rect")
            .attr("class", function(d, i) {
                if (d.parent) {
                    return "lightBar";
                } else {
                    return "darkBar";
                }
            })
            .attr("x", 0)
            .attr("y", function(d, i) {
                return (i + 1) * rowHeight;
            })
            .attr("width", width)
            .attr("height", rowHeight);

        // Make rank text
        var dataRanks = dataRows.selectAll(".dataRank").data(dataInt, key);

        dataRanks.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("transform", function(d, i) {
                if (!d.parent) {
                    return "translate(" + textPadding + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                } else {
                    return "translate(" + (textPadding + childOffset) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                }
            });
        dataRanks.exit().transition().duration(500)
            .style("opacity", .000001)
            .remove();
        dataRanks.enter().append("text")
            .style("opacity", .000001)
            .text(function(d) {
                return d.rank;
            })
            .attr("class", "dataRank")
            .attr("transform", function(d, i) {
                if (!d.parent) {
                    return "translate(" + textPadding + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                } else {
                    return "translate(" + (textPadding + childOffset) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                }
            })
            .transition().delay(750).duration(500)
            .style("opacity", 1);

        // Make action text
        var dataActions = dataRows.selectAll(".dataAction").data(dataInt, key);

        dataActions.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("transform", function(d, i) {
                if (!d.parent) {
                    return "translate(" + (rankWidth + textPadding) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                } else {
                    return "translate(" + (rankWidth + textPadding + childOffset) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                }
            });
        dataActions.exit().transition().duration(500)
            .style("opacity", .000001)
            .remove();
        dataActions.enter().append("text")
            .style("opacity", .000001)
            .text(function(d) {
                if (d.label.length > 20) {
                    return d.label.slice(0, 20) + "...";
                } else {
                    return d.label;
                }
            })
            .attr("class", "dataAction")
            .attr("transform", function(d, i) {
                if (!d.parent) {
                    return "translate(" + (rankWidth + textPadding) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                } else {
                    return "translate(" + (rankWidth + textPadding + childOffset) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                }
            })
            .transition().delay(750).duration(500)
            .style("opacity", 1);

        // Make click text
        var dataClicks = dataRows.selectAll(".dataClick").data(dataInt, key);

        dataClicks.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("transform", function(d, i) {
                if (!d.parent) {
                    return "translate(" + (rankWidth + categoryWidth + textPadding) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                } else {
                    return "translate(" + (rankWidth + categoryWidth + textPadding + childOffset) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                }
            });
        dataClicks.exit().transition().duration(500)
            .style("opacity", .000001)
            .remove();
        dataClicks.enter().append("text")
            .style("opacity", .000001)
            .text(function(d) {
                return d.clickcount;
            })
            .attr("class", "dataClick")
            .attr("transform", function(d, i) {
                if (!d.parent) {
                    return "translate(" + (rankWidth + categoryWidth + textPadding) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                } else {
                    return "translate(" + (rankWidth + categoryWidth + textPadding + childOffset) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                }
            })
            .transition().delay(750).duration(500)
            .style("opacity", 1);

        // Make percent text
        var dataPercents = dataRows.selectAll(".dataPercent").data(dataInt, key);

        dataPercents.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("transform", function(d, i) {
                if (!d.parent) {
                    return "translate(" + (rankWidth + categoryWidth + countWidth + percentWidth - textPadding) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                } else {
                    return "translate(" + (rankWidth + categoryWidth + countWidth + percentWidth - textPadding - childOffset) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                }
            });
        dataPercents.exit().transition().duration(500)
            .style("opacity", .000001)
            .remove();
        dataPercents.enter().append("text")
            .style("opacity", .000001)
            .text(function(d) {
                return d.percentage + "%";
            })
            .attr("class", "dataPercent")
            .attr("transform", function(d, i) {
                if (!d.parent) {
                    return "translate(" + (rankWidth + categoryWidth + countWidth + percentWidth - textPadding) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                } else {
                    return "translate(" + (rankWidth + categoryWidth + countWidth + percentWidth - textPadding - childOffset) + "," + Math.floor((i + 1) * rowHeight + rowHeight / 2 + textPadding) + ")";
                }
            })
            .transition().delay(750).duration(500)
            .style("opacity", 1);

        // Make data bars
        var dataBars = dataRows.selectAll(".dataBar, .lightDataBar").data(dataInt, key);

        dataBars.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("y", function(d, i) {
                return (i + 1) * rowHeight + (rowHeight - barHeight) / 2;
            });
        dataBars.exit().transition().duration(500)
            .attr("x", barCenter)
            .attr("width", 0)
            .remove();
        dataBars.enter().append("rect")
            .attr("class", function(d) {
                if (!d.parent) {
                    return "dataBar";
                } else {
                    return "lightDataBar";
                }
            })
            .attr("x", function(d) {
                return barCenter;
            })
            .attr("y", function(d, i) {
                return (i + 1) * rowHeight + (rowHeight - barHeight) / 2;
            })
            .attr("width", function(d) {
                return 0;
            })
            .attr("height", barHeight)
            .style("cursor", function(d) {
                if (id == "#graph_module_clicks" && !d.parent) {
                    return "pointer";
                } else {
                    return "auto";
                }
            })
            .on("click", function(d) {
                if (id == "#graph_module_clicks" && !d.expanded && !d.parent) {
                    d.expanded = 1;
                    load_details(d.label, id);
                } else if (id == "#graph_module_clicks" && d.expanded && !d.parent) {
                    d.expanded = 0;
                    remove_details(d.label, id);
                }
            })
            .transition().delay(750).duration(500)
            .attr("x", function(d) {
                return barCenter - x(d.clickcount) / 2;
            })
            .attr("width", function(d) {
                return x(d.clickcount);
            });

        // Add borders ///////////////////////////////////////////////////////////////////////////////////
        var lightBorder = gAll.selectAll(".lightBorder").data([dataInt]);

        lightBorder.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("height", height);
        lightBorder.exit().remove();
        lightBorder.enter().append("rect")
            .attr("class", "lightBorder")
            .attr("x", 0)
            .attr("y", 0)
            .attr("width", width)
            .attr("height", height);;

        var darkBorder = gAll.selectAll(".darkBorder").data([dataInt]);

        darkBorder.transition().delay(function(d) {
                if (oldHeight > height) {
                    return 500;
                } else {
                    return 0;
                }
            })
            .duration(750)
            .attr("height", height - rowHeight);
        darkBorder.exit().remove();
        darkBorder.enter().append("rect")
            .attr("class", "darkBorder")
            .attr("x", 0)
            .attr("y", rowHeight)
            .attr("width", width)
            .attr("height", height - rowHeight);
    }

    function load_details(category, id) {
        var updateData = _.cloneDeep(AppStatsGlobals[id].Data);
        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: "data_module_details",
            dataType: "json",
            data: {
                "category": category
            },
            success: function(detailSet) {
                var detailData = _.cloneDeep(detailSet);
                var index = _.findIndex(updateData, {
                    "label": category
                });
                updateData = _.concat(_.slice(updateData, 0, index + 1), detailData, _.slice(updateData, index + 1, updateData.length));

                AppStatsGlobals[id].Data = updateData;
                draw_graph_clicks_overview(id);
            },
            error: function(result) {
                error();
            }
        });
    }

    function remove_details(category, id) {
        var updateData = _.cloneDeep(AppStatsGlobals[id].Data);
        console.log(updateData);
        var startIndex = _.findIndex(updateData, {
            "label": category
        });
        var endIndex = startIndex + 1;
        while (endIndex < updateData.length && updateData[endIndex].parent) {
            endIndex++;
        }
        console.log("start=" + startIndex + ", end=" + endIndex);
        updateData = _.concat(_.slice(updateData, 0, startIndex + 1), _.slice(updateData, endIndex, updateData.length));
        console.log(updateData);

        AppStatsGlobals[id].Data = updateData;
        draw_graph_clicks_overview(id);
    }

    function sort_clicks_overview(id, sort) {
        if (AppStatsGlobals[id].Data.length != AppStatsGlobals[id].OriginalData.length) { // If details are present, those must be removed first
            // Go back to original data set (no details)
            switch (AppStatsGlobals[id].Sort) {
                case 0: // rank asc
                    AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                        return d3.ascending(a.rank, b.rank);
                    });
                    break;
                case 1: // rank desc
                    AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                        return d3.ascending(b.rank, a.rank);
                    });
                    break;
                case 2: // label asc
                    AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                        return d3.ascending(a.label, b.label);
                    });
                    break;
                case 3: // label desc
                    AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                        return d3.ascending(b.label, a.label);
                    });
                    break;
            }

            // Apply new sort after 750 mS (time for details to be removed)
            switch (sort) {
                case 0: // rank asc
                    setTimeout(function() {
                        AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                            return d3.ascending(a.rank, b.rank);
                        });
                        draw_graph_clicks_overview(id);
                    }, 750);
                    break;
                case 1: // rank desc
                    setTimeout(function() {
                        AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                            return d3.ascending(b.rank, a.rank);
                        });
                        draw_graph_clicks_overview(id);
                    }, 750);
                    break;
                case 2: // label asc
                    setTimeout(function() {
                        AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                            return d3.ascending(a.label, b.label);
                        });
                        draw_graph_clicks_overview(id);
                    }, 750);
                    break;
                case 3: // label desc
                    setTimeout(function() {
                        AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                            return d3.ascending(b.label, a.label);
                        });
                        draw_graph_clicks_overview(id);
                    }, 750);
                    break;
            }
        } else { // Otherwise, you can just resort the data
            switch (sort) {
                case 0: // rank asc
                    AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                        return d3.ascending(a.rank, b.rank);
                    });
                    break;
                case 1: // rank desc
                    AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                        return d3.ascending(b.rank, a.rank);
                    });
                    break;
                case 2: // label asc
                    AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                        return d3.ascending(a.label, b.label);
                    });
                    break;
                case 3: // label desc
                    AppStatsGlobals[id].Data = AppStatsGlobals[id].OriginalData.sort(function(a, b) {
                        return d3.ascending(b.label, a.label);
                    });
                    break;
            }
        }

        // Update global sort
        AppStatsGlobals[id].Sort = sort;
        draw_graph_clicks_overview(id);
    }

})();