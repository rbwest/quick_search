(function() {
    var AppStatsGlobals = {};
    AppStatsGlobals["#graph_general_statistics"] = {};

    $(document).on("turbolinks:load", function() {
        if ($("#graph_line").length) {
            $.ajax({
                type: "GET",
                contentType: "application/json; charset=utf-8",
                url: "appstats/data_general_statistics",
                dataType: "json",
                success: function(sampleDataSet) {
                    var dataMain = _.cloneDeep(sampleDataSet);
                    var dataMini = _.cloneDeep(sampleDataSet);

                    draw_graph_general_statistics(dataMain, false, 0);

                    draw_graph_mini(dataMini[0], "#mini0");
                    document.getElementById("mini0").addEventListener("click", function() {
                        load_new_data(0);
                    });
                    document.getElementById("mini0").addEventListener("mouseover", function() {
                        d3.select("#mini0").select(".areaMini").style("fill", "lightsteelblue");
                    });
                    d3.select("#mini0").on("mouseout", function() {
                        d3.select("#mini0").select(".areaMini").style("fill", "steelblue");
                    });
                    draw_graph_mini(dataMini[1], "#mini1");
                    document.getElementById("mini1").addEventListener("click", function() {
                        load_new_data(1);
                    });
                    document.getElementById("mini1").addEventListener("mouseover", function() {
                        d3.select("#mini1").select(".areaMini").style("fill", "lightsteelblue");
                    });
                    document.getElementById("mini1").addEventListener("mouseout", function() {
                        d3.select("#mini1").select(".areaMini").style("fill", "steelblue");
                    });
                    draw_graph_mini(dataMini[2], "#mini2");
                    document.getElementById("mini2").addEventListener("click", function() {
                        load_new_data(2);
                    });
                    document.getElementById("mini2").addEventListener("mouseover", function() {
                        d3.select("#mini2").select(".areaMini").style("fill", "lightsteelblue");
                    });
                    document.getElementById("mini2").addEventListener("mouseout", function() {
                        d3.select("#mini2").select(".areaMini").style("fill", "steelblue");
                    });
                    draw_graph_mini(dataMini[3], "#mini3");
                    document.getElementById("mini3").addEventListener("click", function() {
                        load_new_data(3);
                    });
                    document.getElementById("mini3").addEventListener("mouseover", function() {
                        d3.select("#mini3").select(".areaMini").style("fill", "lightsteelblue");
                    });
                    document.getElementById("mini3").addEventListener("mouseout", function() {
                        d3.select("#mini3").select(".areaMini").style("fill", "steelblue");
                    });
                },
                error: function(result) {
                    error();
                }
            });
        }
    });

    function error() {
        console.log("Error retrieving data");
    }

    function draw_graph_general_statistics(dataShared, transitioning, index) {
        var transitioning = transitioning;
        var Globals = AppStatsGlobals["#graph_general_statistics"],
            svg = d3.select("#graph_general_statistics"),
            dataInt = dataShared[index],
            margin = {
                top: 20,
                right: 20,
                bottom: 110,
                left: 40
            },
            margin2 = {
                top: 430,
                right: 20,
                bottom: 30,
                left: 40
            },
            width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom,
            height2 = +svg.attr("height") - margin2.top - margin2.bottom,
            titles = ["Clicks", "Serves", "Sessions", "Searches"]
        title = titles[index];

        // Parse dates into proper format
        var parseDate = d3.timeParse("%Y-%m-%d");

        dataInt.forEach(function(d) {
            d.date = parseDate(d.date);
        });

        // Make scales
        var x = d3.scaleTime().range([0, width]),
            x2 = d3.scaleTime().range([0, width]),
            y = d3.scaleLinear().range([height, 0]),
            y2 = d3.scaleLinear().range([height2, 0]);

        // Set domains
        if (_.isEqual(undefined, Globals.Domain)) {
            x.domain(d3.extent(dataInt, function(d) {
                return d.date;
            }));
        } else {
            x.domain(Globals.Domain);
        }
        y.domain([0, d3.max(dataInt, function(d) {
            return d.count;
        })]);
        x2.domain(d3.extent(dataInt, function(d) {
            return d.date;
        }));
        y2.domain(y.domain());

        // Make axes
        var xAxis = d3.axisBottom(x),
            xAxis2 = d3.axisBottom(x2),
            yAxis = d3.axisLeft(y);

        // Make brush and zoom
        var brush = d3.brushX()
            .extent([
                [0, 0],
                [width, height2]
            ])
            .on("brush end", brushed);

        var zoom = d3.zoom()
            .scaleExtent([1, 1000])
            .translateExtent([
                [0, 0],
                [width, height]
            ])
            .extent([
                [0, 0],
                [width, height]
            ])
            .on("zoom", zoomed);

        // Make areas
        var area = d3.area()
            .curve(d3.curveMonotoneX)
            .x(function(d) {
                return x(d.date);
            })
            .y0(height)
            .y1(function(d) {
                return y(d.count);
            });

        var area2 = d3.area()
            .curve(d3.curveMonotoneX)
            .x(function(d) {
                return x2(d.date);
            })
            .y0(height2)
            .y1(function(d) {
                return y2(d.count);
            });

        // Make focus
        var focusSelection = svg.selectAll(".focus").data([dataInt]);

        focusSelection.exit().remove();
        focusSelection.enter().append("g")
            .attr("class", "focus")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        var focus = svg.select(".focus");

        // Make context
        var contextSelection = svg.selectAll(".context").data([dataInt]);

        contextSelection.exit().remove();
        contextSelection.enter().append("g")
            .attr("class", "context")
            .attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

        var context = svg.select(".context");

        // Make clip path
        var clipSelection = svg.selectAll("defs").data([dataInt]);

        clipSelection.exit().remove();
        clipSelection.enter().append("defs").append("clipPath")
            .attr("id", "clip")
            .append("rect")
            .attr("width", width)
            .attr("height", height);

        // Make focus x axis
        var xAxisSelection = focus.selectAll(".xAxis").data([dataInt]);

        xAxisSelection.transition().duration(750)
            .call(xAxis);
        xAxisSelection.exit().remove();
        xAxisSelection.enter().append("g")
            .attr("class", "xAxis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis);

        // Make focus y axis
        var yAxisSelection = focus.selectAll(".yAxis").data([dataInt]);

        yAxisSelection.transition().duration(750)
            .call(yAxis);
        yAxisSelection.exit().remove();
        yAxisSelection.enter().append("g")
            .attr("class", "yAxis")
            .attr("transform", "translate(0,0)")
            .call(yAxis);

        // Make chart title
        var titleSelection = focus.selectAll(".chartTitle").data([dataInt]);

        titleSelection.transition().duration(325)
            .style("opacity", .00001)
            .transition()
            .text(title)
            .transition().duration(325)
            .style("opacity", 1);
        titleSelection.exit().remove();
        titleSelection.enter().append("text")
            .text(title)
            .attr("class", "chartTitle")
            .attr("transform", "translate(" + (width / 2) + "," + 30 + ")");

        // Make focus path
        var focusPathSelection = focus.selectAll(".area").data([dataInt]);

        focusPathSelection.datum(dataInt).transition().duration(750)
            .attr("d", area);
        focusPathSelection.exit().remove();
        focusPathSelection.enter().append("path")
            .datum(dataInt)
            .attr("class", "area")
            .attr("d", area);

        // Make context x axis
        var xAxis2Selection = context.selectAll(".xAxis").data([dataInt]);

        xAxis2Selection.transition().duration(500)
            .call(xAxis2);
        xAxis2Selection.exit().remove();
        xAxis2Selection.enter().append("g")
            .attr("class", "xAxis")
            .attr("transform", "translate(0," + height2 + ")")
            .call(xAxis2);

        // Make context path
        var contextPathSelection = context.selectAll(".area").data([dataInt]);

        contextPathSelection.datum(dataInt).transition().duration(750)
            .attr("d", area2);
        contextPathSelection.exit().remove();
        contextPathSelection.enter().append("path")
            .datum(dataInt)
            .attr("class", "area")
            .attr("d", area2);

        // Make brush container
        var brushSelection = context.selectAll(".brush").data([dataInt]);

        brushSelection.exit().remove();
        brushSelection.enter().append("g")
            .attr("class", "brush")
            .call(brush)
            .call(brush.move, x.range())
            .merge(brushSelection)
            .call(brush);

        // Make zoom container
        var zoomSelection = svg.selectAll(".zoom").data([dataInt]);

        zoomSelection.exit().remove();
        zoomSelection.enter().append("rect")
            .attr("class", "zoom")
            .attr("width", width)
            .attr("height", height)
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
            .merge(zoomSelection)
            .call(zoom);

        // Have to prevent zoom or brush temporarily for transitions to execute
        if (transitioning) {
            setTimeout(function() {
                transitioning = false
            }, 50);
        }

        function brushed() {
            if (!transitioning) {
                if (d3.event.sourceEvent && d3.event.sourceEvent.type === "zoom") return;
                var s = d3.event.selection || x2.range();
                x.domain(s.map(x2.invert, x2));
                Globals.Domain = x.domain();
                focus.select(".area").attr("d", area);
                focus.select(".xAxis").call(xAxis);
                svg.select(".zoom").call(zoom.transform, d3.zoomIdentity
                    .scale(width / (s[1] - s[0]))
                    .translate(-s[0], 0));
            }
        }

        function zoomed() {
            if (!transitioning) {
                if (d3.event.sourceEvent && d3.event.sourceEvent.type === "brush") return;
                var t = d3.event.transform;
                x.domain(t.rescaleX(x2).domain());
                Globals.Domain = x.domain();
                focus.select(".area").attr("d", area);
                focus.select(".xAxis").call(xAxis);
                context.select(".brush").call(brush.move, x.range().map(t.invertX, t));
            }
        }

        function type(d) {
            d.date = parseDate(d.date);
            d.count = +d.count;
            return d;
        }
    }

    function load_new_data(index) {
        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: "appstats/data_general_statistics",
            dataType: "json",
            success: function(updateDataSet) {
                var updateData = _.cloneDeep(updateDataSet);
                draw_graph_general_statistics(updateData, true, index);
            },
            error: function(result) {
                error();
            }
        });
    }

    function draw_graph_mini(dataShared, id) {
        var svg = d3.select(id),
            dataInt = dataShared,
            margin = {
                top: 5,
                right: 5,
                bottom: 5,
                left: 5
            }
        width = +svg.attr("width") - margin.left - margin.right,
            height = +svg.attr("height") - margin.top - margin.bottom,
            title = "";
        if (id == "#mini0") {
            title = "Clicks";
        }
        if (id == "#mini1") {
            title = "Serves";
        }
        if (id == "#mini2") {
            title = "Sessions";
        }
        if (id == "#mini3") {
            title = "Searches";
        }

        var parseDate = d3.timeParse("%Y-%m-%d");

        dataInt.forEach(function(d) {
            d.date = parseDate(d.date);
        });

        var x = d3.scaleTime().range([0, width]),
            y = d3.scaleLinear().range([height, 0]);

        x.domain(d3.extent(dataInt, function(d) {
            return d.date;
        }));
        y.domain([0, d3.max(dataInt, function(d) {
            return d.count;
        })]);

        var xAxis = d3.axisBottom(x),
            yAxis = d3.axisLeft(y);

        xAxis.tickSizeOuter(0);
        yAxis.tickSizeOuter(0);

        var area = d3.area()
            .curve(d3.curveMonotoneX)
            .x(function(d) {
                return x(d.date);
            })
            .y0(height)
            .y1(function(d) {
                return y(d.count);
            });

        svg.append("defs").append("clipPath")
            .attr("id", "clipMini")
            .append("rect")
            .attr("width", width)
            .attr("height", height);

        var focus = svg.append("g")
            .attr("class", "focus")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        focus.append("path")
            .datum(dataInt)
            .attr("class", "areaMini")
            .attr("d", area);

        focus.append("text")
            .text(title)
            .attr("class", "chartTitle")
            .attr("transform", "translate(" + (width / 2) + "," + (height / 2) + ")");

        focus.append("g")
            .attr("class", "xAxis")
            .attr("transform", "translate(0," + height + ")")
            .call(xAxis.ticks(0));

        focus.append("g")
            .attr("class", "yAxis")
            .call(yAxis.ticks(0));
    }

})();